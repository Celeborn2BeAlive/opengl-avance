<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shadow Mapping on OpenGL Avancé</title>
    <link>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/</link>
    <description>Recent content in Shadow Mapping on OpenGL Avancé</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <copyright>Copyright (c) 2017, Laurent NOEL; All rights reserved.</copyright>
    
	<atom:link href="https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction</title>
      <link>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/introduction/</guid>
      <description>Nous avons jusqu&amp;rsquo;a présent calculé l&amp;rsquo;éclairage des lumières sans prise en compte des ombres portées par les objets: la lumière passe à travers&amp;hellip;
Pour savoir si un fragment est dans la lumière ou dans l&amp;rsquo;ombre par rapport à une light donnée, il faut savoir si un objet intersecte le rayon connectant le fragment à la lumière. Il y a plusieurs moyens de calculer cette information. Deux méthodes sont principalement utilisées en rendu temps réel: le shadow mapping et les shadow volumes.</description>
    </item>
    
    <item>
      <title>Directional Shadow Map</title>
      <link>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/dir-shadow-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/dir-shadow-map/</guid>
      <description>Nous allons commencer par l&amp;rsquo;utilisation du shadow mapping pour une lumière directionnelle, qui est plus simple.
Il y a globalement quatre partie à coder:
 Initialisation: Allocation des données OpenGL nécessaire à l&amp;rsquo;algorithme Shaders: Coder les shaders nécessaire à la création de la shadow map. Création de la shadow map: A faire au rendu des que la direction de la lumière est modifiée. Il s&amp;rsquo;agit de calculer la depth map selon le point de vue de la light.</description>
    </item>
    
    <item>
      <title>Percentage Closest Filtering</title>
      <link>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/percentage-closest-filtering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/percentage-closest-filtering/</guid>
      <description>Percentage Closest Filtering Basique L&amp;rsquo;aspect visuel du shadow mapping dépend grandement de la résolution choisie. Pour une résolution de 512, vous avez du constater que le rendu des ombres est très aliasé. Il faut monter à 4096 au moins pour ne plus voir l&amp;rsquo;aliasing à une distance correcte, qui reste très visible en se rapprochant.
Une manière de palier à cet aliasing est d&amp;rsquo;utiliser une méthode de filtrage appelée Percentage Closest Filtering, qui consiste à moyenner la visibilité dans un voisinage du point afin de flouter/bruiter les ombres sur leur bord.</description>
    </item>
    
    <item>
      <title>Aller plus loin</title>
      <link>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/aller-plus-loin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Celeborn2BeAlive.github.io/opengl-avance/04-shadow-mapping/aller-plus-loin/</guid>
      <description>Ces exercices vous ont montré comment implementer le shadow mapping pour une lumière directionnelle.
L&amp;rsquo;implémentation est un peu plus compliquée pour une lumière ponctuelle car il faut pouvoir projeter sur la carte de profondeur l&amp;rsquo;ensemble de la scene vu depuis la point light, c&amp;rsquo;est à dire la considérer comme une camera pouvant voir à 360°.
Le plus simple et robuste pour cela est de faire 6 rendus de la scene sur les faces d&amp;rsquo;un cube entourant la point light.</description>
    </item>
    
  </channel>
</rss>